//------------------------------------------------------------------------------
// <auto-generated>
//     Der Code wurde von einer Vorlage generiert.
//
//     Manuelle Änderungen an dieser Datei führen möglicherweise zu unerwartetem Verhalten der Anwendung.
//     Manuelle Änderungen an dieser Datei werden überschrieben, wenn der Code neu generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace kundt_back_end.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class it22AutoverleihEntities : DbContext
    {
        public it22AutoverleihEntities()
            : base("name=it22AutoverleihEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tblAusstattung> tblAusstattung { get; set; }
        public virtual DbSet<tblAuto> tblAuto { get; set; }
        public virtual DbSet<tblBuchung> tblBuchung { get; set; }
        public virtual DbSet<tblEyecatcher> tblEyecatcher { get; set; }
        public virtual DbSet<tblHistorie> tblHistorie { get; set; }
        public virtual DbSet<tblKategorie> tblKategorie { get; set; }
        public virtual DbSet<tblKunde> tblKunde { get; set; }
        public virtual DbSet<tblLand> tblLand { get; set; }
        public virtual DbSet<tblLogin> tblLogin { get; set; }
        public virtual DbSet<tblMarke> tblMarke { get; set; }
        public virtual DbSet<tblMitarbeiter> tblMitarbeiter { get; set; }
        public virtual DbSet<tblPLZOrt> tblPLZOrt { get; set; }
        public virtual DbSet<tblTreibstoff> tblTreibstoff { get; set; }
        public virtual DbSet<tblTyp> tblTyp { get; set; }
    
        public virtual ObjectResult<BuchungAbholung_Result> BuchungAbholung()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuchungAbholung_Result>("BuchungAbholung");
        }
    
        public virtual ObjectResult<BuchungProblem_Result> BuchungProblem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuchungProblem_Result>("BuchungProblem");
        }
    
        public virtual ObjectResult<BuchungRueckgabe_Result> BuchungRueckgabe()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuchungRueckgabe_Result>("BuchungRueckgabe");
        }
    
        public virtual int BuchungUpdate(Nullable<int> id, Nullable<System.DateTime> buchungvon, Nullable<System.DateTime> buchungbis, string buchungstatus, Nullable<bool> storno, Nullable<bool> versicherung)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var buchungvonParameter = buchungvon.HasValue ?
                new ObjectParameter("buchungvon", buchungvon) :
                new ObjectParameter("buchungvon", typeof(System.DateTime));
    
            var buchungbisParameter = buchungbis.HasValue ?
                new ObjectParameter("buchungbis", buchungbis) :
                new ObjectParameter("buchungbis", typeof(System.DateTime));
    
            var buchungstatusParameter = buchungstatus != null ?
                new ObjectParameter("buchungstatus", buchungstatus) :
                new ObjectParameter("buchungstatus", typeof(string));
    
            var stornoParameter = storno.HasValue ?
                new ObjectParameter("storno", storno) :
                new ObjectParameter("storno", typeof(bool));
    
            var versicherungParameter = versicherung.HasValue ?
                new ObjectParameter("versicherung", versicherung) :
                new ObjectParameter("versicherung", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuchungUpdate", idParameter, buchungvonParameter, buchungbisParameter, buchungstatusParameter, stornoParameter, versicherungParameter);
        }
    
        public virtual ObjectResult<OffeneBuchungenTodayPlus13_Result> OffeneBuchungenTodayPlus13()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OffeneBuchungenTodayPlus13_Result>("OffeneBuchungenTodayPlus13");
        }
    
        public virtual ObjectResult<pKundenAnzeigen_Result> pKundenAnzeigen(string searchName, Nullable<int> searchKundenNr, string searchOrt, string searchPLZ)
        {
            var searchNameParameter = searchName != null ?
                new ObjectParameter("searchName", searchName) :
                new ObjectParameter("searchName", typeof(string));
    
            var searchKundenNrParameter = searchKundenNr.HasValue ?
                new ObjectParameter("searchKundenNr", searchKundenNr) :
                new ObjectParameter("searchKundenNr", typeof(int));
    
            var searchOrtParameter = searchOrt != null ?
                new ObjectParameter("searchOrt", searchOrt) :
                new ObjectParameter("searchOrt", typeof(string));
    
            var searchPLZParameter = searchPLZ != null ?
                new ObjectParameter("searchPLZ", searchPLZ) :
                new ObjectParameter("searchPLZ", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pKundenAnzeigen_Result>("pKundenAnzeigen", searchNameParameter, searchKundenNrParameter, searchOrtParameter, searchPLZParameter);
        }
    
        public virtual int pAutoHinzufuegen(Nullable<short> baujahr, string pS, string getriebe, string tueren, Nullable<byte> sitze, Nullable<decimal> mietpreis, Nullable<decimal> verkaufPreis, Nullable<decimal> kilometerstand, byte[] autobild, Nullable<bool> anzeigen, string treibstoff, string typ, string kategorie)
        {
            var baujahrParameter = baujahr.HasValue ?
                new ObjectParameter("Baujahr", baujahr) :
                new ObjectParameter("Baujahr", typeof(short));
    
            var pSParameter = pS != null ?
                new ObjectParameter("PS", pS) :
                new ObjectParameter("PS", typeof(string));
    
            var getriebeParameter = getriebe != null ?
                new ObjectParameter("Getriebe", getriebe) :
                new ObjectParameter("Getriebe", typeof(string));
    
            var tuerenParameter = tueren != null ?
                new ObjectParameter("Tueren", tueren) :
                new ObjectParameter("Tueren", typeof(string));
    
            var sitzeParameter = sitze.HasValue ?
                new ObjectParameter("Sitze", sitze) :
                new ObjectParameter("Sitze", typeof(byte));
    
            var mietpreisParameter = mietpreis.HasValue ?
                new ObjectParameter("Mietpreis", mietpreis) :
                new ObjectParameter("Mietpreis", typeof(decimal));
    
            var verkaufPreisParameter = verkaufPreis.HasValue ?
                new ObjectParameter("VerkaufPreis", verkaufPreis) :
                new ObjectParameter("VerkaufPreis", typeof(decimal));
    
            var kilometerstandParameter = kilometerstand.HasValue ?
                new ObjectParameter("Kilometerstand", kilometerstand) :
                new ObjectParameter("Kilometerstand", typeof(decimal));
    
            var autobildParameter = autobild != null ?
                new ObjectParameter("Autobild", autobild) :
                new ObjectParameter("Autobild", typeof(byte[]));
    
            var anzeigenParameter = anzeigen.HasValue ?
                new ObjectParameter("Anzeigen", anzeigen) :
                new ObjectParameter("Anzeigen", typeof(bool));
    
            var treibstoffParameter = treibstoff != null ?
                new ObjectParameter("Treibstoff", treibstoff) :
                new ObjectParameter("Treibstoff", typeof(string));
    
            var typParameter = typ != null ?
                new ObjectParameter("Typ", typ) :
                new ObjectParameter("Typ", typeof(string));
    
            var kategorieParameter = kategorie != null ?
                new ObjectParameter("Kategorie", kategorie) :
                new ObjectParameter("Kategorie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pAutoHinzufuegen", baujahrParameter, pSParameter, getriebeParameter, tuerenParameter, sitzeParameter, mietpreisParameter, verkaufPreisParameter, kilometerstandParameter, autobildParameter, anzeigenParameter, treibstoffParameter, typParameter, kategorieParameter);
        }
    }
}
